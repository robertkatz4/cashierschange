# Author: Robert Katz
# Version: 0.2, python 2.7.12
# Program description: Designed to be run from the cammand line. The purpose of this program is to compute change, give the proper bill breakdown.
# Input parameters:  1. Cost of the item 2. Amount paid.
# output: proper denomination breakdown
# Revision history:
##  8-27-16:  initial commit
##  8-28-16:  fix decimal/float/int-related currency issues, added notation
# next step: deploying datatype decimal to address currency issue

# captures cost, converts to # of cents by
##cost = raw_input("What is the cost of the item? $")
##money = raw_input("How much are you gving the cashier? $")

def change(cost,money):
	if cost>money:
		print "Whoops. You did not give the cashier enough money."
		quit()
	else: ##
		# converts to # of cents - but need original value for printing purposes
		cost_cents = int(100*cost)
		money_cents = int(money*100)
	return (float(money_cents) - float(cost_cents))/100

## use for test cases
## cost = 6.25 ##
## money = 7.24 ##

## use to get input from user
cost = float(raw_input("What is the cost of the item? $")) ##
money = float(raw_input("How much are you gving the cashier? $"))
print "I paid $%r for something that cost $%r" % (money,cost)
print "The cashier returned $%r to me." % change(cost,money)

returned_money = int(change(cost,money) *100)
# check if 100s are required in returned_money
# the purpose for the multple conditions is multiple/singular bills/bill etc
hundreds = int(returned_money // 10000.0)
if hundreds > 1:
	print "%r hundred-dollar bills" % hundreds
	returned_money = returned_money - (hundreds * 10000)
elif hundreds == 1:
	print "%r hundred-dollar bill" % hundreds
	returned_money = returned_money - (hundreds * 10000)
else:
	pass

# check if 20s are required in returned_money
twenties = int(returned_money // 2000.0)
if twenties > 1:
	print "%r twenty-dollar bills" % twenties
	returned_money = returned_money - (twenties * 2000)
elif twenties == 1:
	print "%r twenty-dollar bill" % twenties
	returned_money = returned_money - (twenties * 2000)
else:
	pass

# check if 10s are required in returned_money
tens = int(returned_money // 1000.0)
if tens > 1:
	print "%r ten-dollar bills" % tens
	returned_money = returned_money - (tens * 1000)
elif tens == 1:
	print "%r ten-dollar bill" % tens
	returned_money = returned_money - (tens * 1000)
else:
	pass

# check if 5s are required in returned_money
fives = int(returned_money // 500.0)
if fives > 1:
	print "%r five-dollar bills" % fives
	returned_money = returned_money - (fives * 500.0)
elif fives == 1:
	print "%r five-dollar bill" % fives
	returned_money = returned_money - (fives * 500.0)
else:
	pass

# check if singles are required in returned_money
singles = int(returned_money // 100.0)
if singles > 1:
	print "%r singles" % singles
	returned_money = returned_money - (singles * 100)
elif singles == 1:
	print "%r single" % singles
	returned_money = returned_money - (singles * 100)
else:
	pass

# check if quarters are required in returned_money
quarters = int(returned_money // 25)
if quarters > 1:
	print "%r quarters" % quarters
	returned_money = returned_money - (quarters * 25)
elif quarters == 1:
	print "%r quarter" % quarters
	returned_money = returned_money - (quarters * 25)
else:
	pass

# check if dimes are required in returned_money
dimes = int(returned_money // 10)
if dimes > 1:
	print "%r dimes" % dimes
	returned_money = returned_money - (dimes * 10)
elif dimes == 1:
	print "%r dimes" % dimes
	returned_money = returned_money - (dimes * 10)
else:
	pass

# check if nickels are required in returned_money
nickels = int(returned_money // 5)
if nickels > 1:
	print "%r nickels" % nickels
	returned_money = returned_money - (nickels * 5)
elif nickels == 1:
	print "%r nickel" % nickels
	returned_money = returned_money - (nickels * 5)
else:
	pass

# check if pennies are required in returned_money
pennies = int(returned_money // 1)
if pennies > 1:
	print "%r pennies" % pennies
	returned_money = returned_money - (pennies * 1)
elif pennies == 1:
	print "%r penny" % pennies
	returned_money = returned_money - (pennies * 1)
else:
	pass
